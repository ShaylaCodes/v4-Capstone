from dotenv import load_dotenv
import os
import psycopg2
from psycopg2 import Error

load_dotenv()

DB_HOST = os.getenv('HOST')
DB_NAME = os.getenv('DATABASE')
DB_USER = os.getenv('DB_USER')
DB_PASS = os.getenv('PASS')
DB_PORT = os.getenv('PORT')

class Database:
   def __init__(self):
    self.conn = psycopg2.connect(
       host=DB_HOST,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASS,
        port=DB_PORT
        )
    self.cur = self.conn.cursor()
    def execute(self,query,PARAM=None,which_query='r'):
        try:
            self.cursor.execute(query,PARAM)
        except:
            print('Oops..something went wrong.',query)
        finally:
            if which_query=='r':
                print(self.cur.fetchall())
            if which_query=='w':
               self.conn.commit()
               print('The query was successful!') 
            else:
                print('Oops..something went wrong.')
    def close(self):
         self.connection.close()
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author
        self.status = 'available'

    def __str__(self):
        return f'Title: {self.title}, Author: {self.author}, Status: {self.status}'


class Member:
    def __init__(self, name, member_id):
        self.name = name
        self.member_id = member_id
        self.borrowed_books = []

    def get_borrowed_books(self,database):
        query= f"SELECT * FROM borrowed_books WHERE member_id={self.member_id}"
        
    
    
    def borrow_book(self, book):
        if book.status == 'available':
            book.status = 'borrowed'
            self.borrowed_books.append(book)
            print(f'{self.name} borrowed {book.title}.')
        else:
            print(f'This book is currently borrowed by someone else.')

    def number_of_borrowed_books(self,books): 
        ("""SELECT COUNT(borrow_date) FROM borrowed_books AVG(datediff(borrowed_books)) WHERE borrow_date""")
